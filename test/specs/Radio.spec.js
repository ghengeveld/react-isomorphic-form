import React from 'react'
import { mount } from 'enzyme'

import Radio from '../../src/Radio'
import Form from '../../src/Form'

function mountForm(children) {
  return mount(<Form name="myForm" action="/action" method="POST">{children}</Form>)
}

describe('Radio', () => {
  it('should render an <input> element with type="radio"', () => {
    const wrapper = mountForm(<Radio name="val" value="yes" />)
    expect(wrapper.find('input[type="radio"]').length).to.equal(1)
  })

  it('should not be checked by default', () => {
    const input = mountForm(<Radio name="val" value="yes" />).find('input')
    expect(input.prop('checked')).to.be.false()
  })

  it('should use the initial value to set the checked property', () => {
    const input = mountForm(<Radio name="val" value="yes" initial="yes" />).find('input')
    expect(input.prop('checked')).to.be.true()
  })

  it('should receive an autogenerated ID by default', () => {
    const input = mountForm(<Radio name="myRadio" value="myValue" />).find('input')
    expect(input.prop('id')).to.equal('myForm_myRadio_myValue')
  })

  it('should pass on any props, overriding the autogenerated ID', () => {
    const input = mountForm(<Radio name="val" value="yes" id="myRadio" className="fancy" />).find('input')
    expect(input.prop('id')).to.be.equal('myRadio')
    expect(input.prop('className')).to.equal('fancy')
  })

  describe('when changing selection', () => {
    it('should update its value, replacing the initial value', () => {
      const inputs = mountForm(
        <div>
          <Radio name="val" value="yes" initial="yes" />
          <Radio name="val" value="no" initial="yes" />
        </div>
      ).find('input')
      const yes = inputs.first()
      const no = inputs.last()
      expect(yes.prop('checked')).to.be.true()
      expect(no.prop('checked')).to.be.false()
      no.simulate('change', { target: { checked: true } })
      expect(yes.prop('checked')).to.be.false()
      expect(no.prop('checked')).to.be.true()
    })

    it('should trigger the onChange handler', () => {
      const onChange = sinon.spy()
      const input = mountForm(<Radio name="val" value="yes" onChange={onChange} />).find('input')
      input.simulate('change', { target: { checked: true } })
      expect(onChange).to.have.been.called()
    })
  })
})
