import React from 'react'
import { mount } from 'enzyme'

import Input from '../../src/Input'
import Form from '../../src/Form'

function mountForm(children) {
  return mount(<Form name="myForm" action="/action" method="POST">{children}</Form>)
}

describe('Input', () => {
  it('should render an <input> element', () => {
    const wrapper = mountForm(<Input name="val" />)
    expect(wrapper.find('input').length).to.equal(1)
  })

  it('should be empty by default', () => {
    const input = mountForm(<Input name="val" />).find('input')
    expect(input.prop('value')).to.equal('')
  })

  it('should set the initial value as input value', () => {
    const input = mountForm(<Input name="val" initial="Init" />).find('input')
    expect(input.prop('value')).to.equal('Init')
  })

  it('should support other input types', () => {
    const input = mountForm(<Input name="val" type="email" />).find('input')
    expect(input.prop('type')).to.equal('email')
  })

  it('should receive an autogenerated ID by default', () => {
    const input = mountForm(<Input name="myInput" />).find('input')
    expect(input.prop('id')).to.equal('myForm_myInput')
  })

  it('should pass on any props, overriding the autogenerated ID', () => {
    const input = mountForm(<Input name="val" id="myInput" className="fancy" />).find('input')
    expect(input.prop('id')).to.be.equal('myInput')
    expect(input.prop('className')).to.equal('fancy')
  })

  it('should trigger the ref callback', () => {
    const ref = sinon.spy()
    mountForm(<Input name="val" ref={ref} />)
    expect(ref).to.have.been.called()
  })

  describe('when entering data', () => {
    it('should update its value, replacing the initial value', () => {
      const input = mountForm(<Input name="val" initial="Init" />).find('input')
      input.simulate('change', { target: { value: 'Hello' } })
      expect(input.prop('value')).to.equal('Hello')
    })

    it('should trigger the onChange handler', () => {
      const onChange = sinon.spy()
      const input = mountForm(<Input name="val" onChange={onChange} />).find('input')
      input.simulate('change', { target: { value: 'Hello' } })
      expect(onChange).to.have.been.called()
    })
  })
})
