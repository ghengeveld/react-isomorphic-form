import React from 'react'
import { mount } from 'enzyme'

import Checkbox from '../../src/Checkbox'
import Form from '../../src/Form'

function mountForm(children) {
  return mount(<Form name="myForm" action="/action" method="POST">{children}</Form>)
}

describe('Checkbox', () => {
  it('should render an <input> element with type="checkbox"', () => {
    const wrapper = mountForm(<Checkbox name="val" />)
    expect(wrapper.find('input[type="checkbox"]').length).to.equal(1)
  })

  it('should not be checked by default', () => {
    const input = mountForm(<Checkbox name="val" />).find('input')
    expect(input.prop('checked')).to.be.false()
  })

  it('should set the initial value as input value', () => {
    const input = mountForm(<Checkbox name="val" initial={!!true} />).find('input')
    expect(input.prop('checked')).to.be.true()
  })

  it('should receive an autogenerated ID by default', () => {
    const input = mountForm(<Checkbox name="myCheckbox" />).find('input')
    expect(input.prop('id')).to.equal('myForm_myCheckbox')
  })

  it('should pass on any props, overriding the autogenerated ID', () => {
    const input = mountForm(<Checkbox name="val" id="myCheckbox" className="fancy" />).find('input')
    expect(input.prop('id')).to.be.equal('myCheckbox')
    expect(input.prop('className')).to.equal('fancy')
  })

  describe('when changing selection', () => {
    it('should update its value, replacing the initial value', () => {
      const input = mountForm(<Checkbox name="val" initial={!!true} />).find('input')
      expect(input.prop('checked')).to.be.true()
      input.simulate('change', { target: { checked: false } })
      expect(input.prop('checked')).to.be.false()
    })

    it('should trigger the onChange handler', () => {
      const onChange = sinon.spy()
      const input = mountForm(<Checkbox name="val" onChange={onChange} />).find('input')
      input.simulate('change', { target: { checked: true } })
      expect(onChange).to.have.been.called()
    })
  })
})
